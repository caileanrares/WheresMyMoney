#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WheresMyMoney.Models.DBObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WheresMyMoney")]
	public partial class WheresMyMoneyModelsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertMovement(Movement instance);
    partial void UpdateMovement(Movement instance);
    partial void DeleteMovement(Movement instance);
    partial void InsertMovementType(MovementType instance);
    partial void UpdateMovementType(MovementType instance);
    partial void DeleteMovementType(MovementType instance);
    #endregion
		
		public WheresMyMoneyModelsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WheresMyMoneyConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WheresMyMoneyModelsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WheresMyMoneyModelsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WheresMyMoneyModelsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WheresMyMoneyModelsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Movement> Movements
		{
			get
			{
				return this.GetTable<Movement>();
			}
		}
		
		public System.Data.Linq.Table<MovementType> MovementTypes
		{
			get
			{
				return this.GetTable<MovementType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private EntitySet<Movement> _Movements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public User()
		{
			this._Movements = new EntitySet<Movement>(new Action<Movement>(this.attach_Movements), new Action<Movement>(this.detach_Movements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Movement", Storage="_Movements", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Movement> Movements
		{
			get
			{
				return this._Movements;
			}
			set
			{
				this._Movements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movements(Movement entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Movements(Movement entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CategoryId;
		
		private string _Name;
		
		private System.Guid _MovementTypeId;
		
		private EntitySet<Movement> _Movements;
		
		private EntityRef<MovementType> _MovementType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(System.Guid value);
    partial void OnCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMovementTypeIdChanging(System.Guid value);
    partial void OnMovementTypeIdChanged();
    #endregion
		
		public Category()
		{
			this._Movements = new EntitySet<Movement>(new Action<Movement>(this.attach_Movements), new Action<Movement>(this.detach_Movements));
			this._MovementType = default(EntityRef<MovementType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovementTypeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MovementTypeId
		{
			get
			{
				return this._MovementTypeId;
			}
			set
			{
				if ((this._MovementTypeId != value))
				{
					if (this._MovementType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovementTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MovementTypeId = value;
					this.SendPropertyChanged("MovementTypeId");
					this.OnMovementTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Movement", Storage="_Movements", ThisKey="CategoryId", OtherKey="CategoryId")]
		public EntitySet<Movement> Movements
		{
			get
			{
				return this._Movements;
			}
			set
			{
				this._Movements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MovementType_Category", Storage="_MovementType", ThisKey="MovementTypeId", OtherKey="MovementTypeId", IsForeignKey=true)]
		public MovementType MovementType
		{
			get
			{
				return this._MovementType.Entity;
			}
			set
			{
				MovementType previousValue = this._MovementType.Entity;
				if (((previousValue != value) 
							|| (this._MovementType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MovementType.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._MovementType.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._MovementTypeId = value.MovementTypeId;
					}
					else
					{
						this._MovementTypeId = default(System.Guid);
					}
					this.SendPropertyChanged("MovementType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movements(Movement entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Movements(Movement entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movements")]
	public partial class Movement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MovementId;
		
		private System.DateTime _Date;
		
		private float _VALUE;
		
		private System.Guid _UserId;
		
		private string _Notes;
		
		private System.Guid _MovementTypeId;
		
		private System.Guid _CategoryId;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<User> _User;
		
		private EntityRef<MovementType> _MovementType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovementIdChanging(System.Guid value);
    partial void OnMovementIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnVALUEChanging(float value);
    partial void OnVALUEChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnMovementTypeIdChanging(System.Guid value);
    partial void OnMovementTypeIdChanged();
    partial void OnCategoryIdChanging(System.Guid value);
    partial void OnCategoryIdChanged();
    #endregion
		
		public Movement()
		{
			this._Category = default(EntityRef<Category>);
			this._User = default(EntityRef<User>);
			this._MovementType = default(EntityRef<MovementType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovementId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MovementId
		{
			get
			{
				return this._MovementId;
			}
			set
			{
				if ((this._MovementId != value))
				{
					this.OnMovementIdChanging(value);
					this.SendPropertyChanging();
					this._MovementId = value;
					this.SendPropertyChanged("MovementId");
					this.OnMovementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VALUE", DbType="Real NOT NULL")]
		public float VALUE
		{
			get
			{
				return this._VALUE;
			}
			set
			{
				if ((this._VALUE != value))
				{
					this.OnVALUEChanging(value);
					this.SendPropertyChanging();
					this._VALUE = value;
					this.SendPropertyChanged("VALUE");
					this.OnVALUEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(100)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovementTypeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MovementTypeId
		{
			get
			{
				return this._MovementTypeId;
			}
			set
			{
				if ((this._MovementTypeId != value))
				{
					if (this._MovementType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovementTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MovementTypeId = value;
					this.SendPropertyChanged("MovementTypeId");
					this.OnMovementTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Movement", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Movements.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Movements.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(System.Guid);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Movement", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Movements.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Movements.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MovementType_Movement", Storage="_MovementType", ThisKey="MovementTypeId", OtherKey="MovementTypeId", IsForeignKey=true)]
		public MovementType MovementType
		{
			get
			{
				return this._MovementType.Entity;
			}
			set
			{
				MovementType previousValue = this._MovementType.Entity;
				if (((previousValue != value) 
							|| (this._MovementType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MovementType.Entity = null;
						previousValue.Movements.Remove(this);
					}
					this._MovementType.Entity = value;
					if ((value != null))
					{
						value.Movements.Add(this);
						this._MovementTypeId = value.MovementTypeId;
					}
					else
					{
						this._MovementTypeId = default(System.Guid);
					}
					this.SendPropertyChanged("MovementType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovementTypes")]
	public partial class MovementType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MovementTypeId;
		
		private string _Name;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Movement> _Movements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovementTypeIdChanging(System.Guid value);
    partial void OnMovementTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MovementType()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Movements = new EntitySet<Movement>(new Action<Movement>(this.attach_Movements), new Action<Movement>(this.detach_Movements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovementTypeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MovementTypeId
		{
			get
			{
				return this._MovementTypeId;
			}
			set
			{
				if ((this._MovementTypeId != value))
				{
					this.OnMovementTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MovementTypeId = value;
					this.SendPropertyChanged("MovementTypeId");
					this.OnMovementTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MovementType_Category", Storage="_Categories", ThisKey="MovementTypeId", OtherKey="MovementTypeId")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MovementType_Movement", Storage="_Movements", ThisKey="MovementTypeId", OtherKey="MovementTypeId")]
		public EntitySet<Movement> Movements
		{
			get
			{
				return this._Movements;
			}
			set
			{
				this._Movements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.MovementType = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.MovementType = null;
		}
		
		private void attach_Movements(Movement entity)
		{
			this.SendPropertyChanging();
			entity.MovementType = this;
		}
		
		private void detach_Movements(Movement entity)
		{
			this.SendPropertyChanging();
			entity.MovementType = null;
		}
	}
}
#pragma warning restore 1591
